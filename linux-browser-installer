#!/bin/sh

prefix=/usr/local
chroot_path=/compat/ubuntu
ubuntu_version=focal

bindir="${prefix}/bin"
appsdir="${prefix}/share/applications"
chroot_bindir="${chroot_path}/bin"

apt_packages="gnupg pulseaudio"
pkg_list="debootstrap pulseaudio"

chroot_mount_points="
/proc
/sys
/dev
/dev/fd
/dev/shm
/tmp
"

export DEBIAN_FRONTEND=noninteractive

bail()
{
	if [ $# -gt 0 ]; then
		echo "${0##*/}: Error: $*" >&2
	fi
	exit 1
}

mk_mount_dirs()
{
	local dir p
	for p in ${chroot_mount_points}; do
		dir="${chroot_path}/$p"
		[ ! -d "${dir}" ] && mkdir -p "${dir}"
	done
}

umount_chroot()
{
	local mntpts _chroot_path p _p

	_chroot_path=$(realpath "${chroot_path}")
	[ $? -ne 0 -o -z "${_chroot_path}" ] && exit 1
	mntpts=$(mount -p | awk -F'[ \t]+' -v chroot=${_chroot_path} '
		$2 ~ sprintf("^%s/", chroot) {
			mp[n++] = $2
		}
		END {
			while (--n >= 0) print mp[n]
		}
	')
	for p in ${mntpts}; do
		_p=$(realpath "$p")
		[ $? -ne 0 -o -z "${_p}" ] && exit 1
		umount "${_p}" || exit 1
		if (mount -p | grep -q "${_p}/"); then
			bail "Couldn't unmount ${_p}"
		fi
	done
}

install_rc()
{
	install -m 555 rc.d/ubuntu "${prefix}/etc/rc.d"
}

install_steam_utils()
{
	pkg info --exists linux-steam-utils && return
	pkg fetch -y -o /tmp linux-steam-utils || exit 1

	pkgpath=/tmp/All/linux-steam-utils-*.pkg
	[ ! -f ${pkgpath} ] && pkgpath=/tmp/All/linux-steam-utils-*.txz
	[ ! -f ${pkgpath} ] && exit 1
	(cd / && tar -xf ${pkgpath} \
		--exclude '^+COMPACT_MANIFEST' \
		--exclude '^+MANIFEST')
}

install_packages()
{
	for p in ${pkg_list}; do
		pkg info --exists $p && continue
		pkg install -y $p || bail "'pkg install -y $p' failed"
	done
}

fix_ld_path()
{
	local lib

	for lib in ${chroot_path}/lib/x86_64-linux-gnu/ld-*; do
		if [ ! -L ${lib} ]; then
			[ -L ${chroot_path}/lib64/ld-linux-x86-64.so.2 ] && \
				unlink ${chroot_path}/lib64/ld-linux-x86-64.so.2
			cp ${lib} ${chroot_path}/lib64/ld-linux-x86-64.so.2
			return
		fi
	done
}


install_apt_packages()
{
	chroot ${chroot_path} /bin/bash -c 'apt update'
	chroot ${chroot_path} /bin/bash -c 'apt remove -y rsyslog'
	for p in ${apt_packages}; do
		chroot ${chroot_path} /bin/bash -c "apt install -y $p" || \
			bail "'apt install -y $p' failed"
	done
}

build_scripts()
{
	for s in $(find bin chroot/bin rc.d -name "*.in"); do
		sed -E "s#@CHROOT_PATH@#${chroot_path}#g" < $s > ${s%.in}
	done
}

install_chrome()
{
	if [ -x ${chroot_path}/opt/google/chrome/chrome ]; then
		echo "Chrome already installed" >&2
		exit 1
	fi
	echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ " \
	     "stable main" > \
		"${chroot_path}/etc/apt/sources.list.d/google-chrome.list"
	fetch -o ${chroot_path} \
		https://dl.google.com/linux/linux_signing_key.pub || exit 1
	chroot ${chroot_path} /bin/bash -c "apt-key add linux_signing_key.pub" || \
		bail "'apt-key add linux_signing_key.pub' failed"
	chroot ${chroot_path} /bin/bash -c "apt update"
	chroot ${chroot_path} /bin/bash -c "apt install -y google-chrome-stable" || \
		bail "'apt install -y google-chrome-stable' failed"
	[ -d "${chroot_path}/${prefix}/share/fonts" ] && \
		rm -rf "${chroot_path}/${prefix}/share/fonts"
	install -m 555 chroot/bin/chrome "${chroot_bindir}"
	install -m 555 bin/linux-chrome "${bindir}"
	install -m 0644 linux-chrome.desktop "${appsdir}"
}

deinstall_chrome()
{
	chroot ${chroot_path} /bin/bash -c "apt remove -y google-chrome-stable" || \
		bail "'apt remove -y google-chrome-stable' failed"
	rm -f "${appsdir}/linux-chrome.desktop"
	rm -f "${bindir}/linux-chrome"
	rm -f "${chroot_bindir}/chrome"
}

install_brave()
{
	if [ -x ${chroot_path}/opt/brave.com/brave/brave ]; then
		echo "Brave already installed" >&2
		exit 1
	fi
	chroot ${chroot_path} /bin/bash -c \
		"apt install -y apt-transport-https curl" || \
		bail "'apt install -y apt-transport-https curl' failed"
	chroot ${chroot_path} /bin/bash -c \
		'curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -' || \
		bail "'curl -s https://brave-browser-apt-release.s3.brave.com/brave-core.asc | apt-key --keyring /etc/apt/trusted.gpg.d/brave-browser-release.gpg add -' failed"
	chroot ${chroot_path} /bin/bash -c \
		'echo "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" > /etc/apt/sources.list.d/brave-browser-release.list'
	chroot ${chroot_path} /bin/bash -c "apt update"
	chroot ${chroot_path} /bin/bash -c "apt install -y brave-browser" || \
		bail "'apt install -y brave-browser' failed"
	[ -d "${chroot_path}/${prefix}/share/fonts" ] && \
		rm -rf "${chroot_path}/${prefix}/share/fonts"
	install -m 555 chroot/bin/brave "${chroot_bindir}"
	install -m 555 bin/linux-brave "${bindir}"
	install -m 0644 linux-brave.desktop "${appsdir}"
}

deinstall_brave()
{
	chroot ${chroot_path} /bin/bash -c "apt remove -y brave-browser"
	rm -f "${appsdir}/linux-brave.desktop"
	rm -f "${bindir}/linux-brave"
	rm -f "${chroot_bindir}/brave"
}

install_vivaldi()
{
	if [ -x ${chroot_path}/opt/vivaldi/vivaldi ]; then
		echo "Vivaldi already installed" >&2
		exit 1
	fi
	echo "deb [arch=amd64] https://repo.vivaldi.com/archive/deb/ " \
	     "stable main" > \
		"${chroot_path}/etc/apt/sources.list.d/vivaldi.list"
	fetch -o ${chroot_path} \
		https://repo.vivaldi.com/archive/linux_signing_key.pub || exit 1
	chroot ${chroot_path} /bin/bash -c "apt-key add linux_signing_key.pub" || \
		bail "'apt-key add linux_signing_key.pub' failed"
	chroot ${chroot_path} /bin/bash -c "apt update"
	chroot ${chroot_path} /bin/bash -c "apt install -y vivaldi-stable" || \
		bail "'apt install -y vivaldi-stable' failed"
	[ -d "${chroot_path}/${prefix}/share/fonts" ] && \
		rm -rf "${chroot_path}/${prefix}/share/fonts"
	install -m 555 chroot/bin/vivaldi "${chroot_bindir}"
	install -m 555 bin/linux-vivaldi "${bindir}"
	install -m 0644 linux-vivaldi.desktop "${appsdir}"
}

deinstall_vivaldi()
{
	chroot ${chroot_path} /bin/bash -c "apt remove -y vivaldi-stable" || \
		bail "'apt remove -y vivaldi-stable' failed"
	rm -f "${appsdir}/linux-vivaldi.desktop"
	rm -f "${bindir}/linux-vivaldi"
	rm -f "${chroot_bindir}/vivaldi"
}

install_edge()
{
	if [ -x ${chroot_path}/opt/microsoft/msedge/microsoft-edge]; then
		echo "Edge already installed" >&2
		exit 1
	fi
	chroot ${chroot_path} /bin/bash -c \
		"apt install -y apt-transport-https curl" || \
		bail "'apt install -y apt-transport-https curl' failed"
	chroot ${chroot_path} /bin/bash -c \
		'curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | apt-key --keyring /etc/apt/trusted.gpg.d/microsoft.gpg add -' || \
		bail "'curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | apt-key --keyring /etc/apt/trusted.gpg.d/microsoft.gpg add -' failed"
	chroot ${chroot_path} /bin/bash -c \
		'echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-stable.list'
	chroot ${chroot_path} /bin/bash -c "apt update"
	chroot ${chroot_path} /bin/bash -c "apt install -y microsoft-edge-stable" || \
		bail "'apt install -y microsoft-edge-stable' failed"
	[ -d "${chroot_path}/${prefix}/share/fonts" ] && \
		rm -rf "${chroot_path}/${prefix}/share/fonts"
	install -m 555 chroot/bin/edge "${chroot_bindir}"
	install -m 555 bin/linux-edge "${bindir}"
	install -m 0644 linux-edge.desktop "${appsdir}"
}

deinstall_edge()
{
	chroot ${chroot_path} /bin/bash -c "apt remove -y microsoft-edge-stable"
	rm -f "${appsdir}/linux-edge.desktop"
	rm -f "${bindir}/linux-edge"
	rm -f "${chroot_bindir}/edge"
}

install_opera()
{
	if [ -x ${chroot_path}/usr/lib/x86_64-linux-gnu/opera/opera ]; then
		echo "Opera is already installed" >&2
		exit 1
	fi
	chroot ${chroot_path} /bin/bash -c \
		"apt install -y apt-transport-https curl" || \
		bail "'apt install -y apt-transport-https curl' failed"
	chroot ${chroot_path} /bin/bash -c \
		'curl https://deb.opera.com/archive.key | apt-key add -' || \
		bail "'curl https://deb.opera.com/archive.key | apt-key add -' failed"
	chroot ${chroot_path} /bin/bash -c \
		'echo "deb https://deb.opera.com/opera-stable/ stable non-free" > /etc/apt/sources.list.d/opera-stable.list'
	chroot ${chroot_path} /bin/bash -c "apt update"
	chroot ${chroot_path} /bin/bash -c "apt install -y opera-stable" || \
		bail "'apt install -y opera-stable' failed"
	[ -d "${chroot_path}/${prefix}/share/fonts" ] && \
		rm -rf "${chroot_path}/${prefix}/share/fonts"
	install -m 555 chroot/bin/opera "${chroot_bindir}"
	install -m 555 bin/linux-opera "${bindir}"
	install -m 0644 linux-opera.desktop "${appsdir}"
}

deinstall_opera()
{
	chroot ${chroot_path} /bin/bash -c "apt remove -y opera-stable"
	rm -f "${appsdir}/linux-opera.desktop"
	rm -f "${bindir}/linux-opera"
	rm -f "${chroot_bindir}/opera"
}

symlink_icons()
{
	local name i
	[ ! -d ${chroot_path}/usr/share/icons ] && \
		mkdir -p ${chroot_path}/usr/share/icons
	for i in ${prefix}/share/icons/*; do
		[ ! -d $i ] && continue
		name=$(basename $i)
		[ -e ${chroot_path}/usr/share/icons/${name} ] && continue
		ln -s $i ${chroot_path}/usr/share/icons
	done
}

symlink_themes()
{
	local name i
	[ ! -d ${chroot_path}/usr/share/themes ] && \
		mkdir -p ${chroot_path}/usr/share/themes
	for i in ${prefix}/share/themes/*; do
		[ ! -d $i ] && continue
		name=$(basename $i)
		[ -e ${chroot_path}/usr/share/themes/${name} ] && continue
		ln -s $i ${chroot_path}/usr/share/themes
	done
}

set_timezone()
{
	printf "0.0 0 0.0\n0\nUTC\n" > ${chroot_path}/etc/adjtime
	if [ ! -d "${chroot_path}/etc/localtime" ]; then
		mkdir -p "${chroot_path}/etc/localtime"
	fi
	cp /var/db/zoneinfo "${chroot_path}/etc/timezone" \
		${chroot_path}/etc/localtime
	rm -f ${chroot_path}/etc/localtime
	ln -s "/usr/share/zoneinfo/$(cat /var/db/zoneinfo)" \
		${chroot_path}/etc/localtime
	chroot ${chroot_path} /bin/bash -c \
		"dpkg-reconfigure --frontend noninteractive tzdata"
}

install_chroot_base()
{
	[ -f ${chroot_path}/etc/os-release ] && return
	mk_mount_dirs
	install_rc
	sysrc linux_enable=NO
	sysrc ubuntu_enable=YES
	service ubuntu start || bail "Failed to start ubuntu service"
	install_steam_utils
	install_packages
	debootstrap --arch=amd64 --no-check-gpg ${ubuntu_version} ${chroot_path} || \
		bail "debootstrap failed"
	echo "APT::Cache-Start 251658240;" > \
		${chroot_path}/etc/apt/apt.conf.d/00aptitude
	echo "deb http://archive.ubuntu.com/ubuntu/ ${ubuntu_version} " \
	     "main restricted universe multiverse" > \
		${chroot_path}/etc/apt/sources.list
	echo "deb http://archive.ubuntu.com/ubuntu/ ${ubuntu_version}-updates " \
	     "main restricted universe multiverse" >> \
		${chroot_path}/etc/apt/sources.list
	echo "deb http://archive.ubuntu.com/ubuntu/ ${ubuntu_version}-security " \
	     "main restricted universe multiverse" >> \
		${chroot_path}/etc/apt/sources.list
	fix_ld_path
	set_timezone
	service ubuntu start
	install_apt_packages
	symlink_icons
	symlink_themes
}

deinstall_chroot_base()
{
	local path
	path=$(realpath ${chroot_path})
	[ $? -ne 0 ] && exit 1

	if [ "${path}" = "/" ]; then
		echo "chroot_path must not be '/'" >&2
		exit 1
	fi
	umount_chroot
	rm -rf "${path}"
	rm -f "${prefix}/etc/rc.d/ubuntu"
	sysrc -x ubuntu_enable
}

upgrade_chroot()
{
	local flags="-q -y --allow-downgrades"
	flags="${flags} --allow-remove-essential --allow-change-held-packages"
	chroot ${chroot_path} /bin/bash -c "apt-get update && apt upgrade ${flags}"
}

cleanup()
{
	browsers="brave chrome edge vivaldi opera"
	for b in ${browsers}; do
		rm -f "bin/linux-$b"
		rm -f "chroot/bin/$b"
	done
	rm -f rc.d/ubuntu
}

usage()
{
	echo "Usage: $0 install <brave|chrome|edge|vivaldi|opera>"
	echo "       $0 deinstall <brave|chrome|edge|vivaldi|opera>"
	echo "       $0 chroot <create|upgrade|delete>"
	echo "       $0 symlink <icons|themes>"
	echo "       $0 clean"
	exit 1
}

if [ $(id -u) -ne 0 ]; then
	echo "This script must be run as root" 1>&2
	exit 1
fi

[ $# -eq 0 ] && usage

while [ $# -gt 0 ]; do
	case "$1" in
	install)
		case $2 in
		brave|chrome|edge|vivaldi|opera)
			browser=$2
			build_scripts
			install_chroot_base
			eval install_${browser}
			;;
		*)
			usage
			;;
		esac
		shift
		;;
	deinstall)
		case $2 in
		brave|chrome|edge|vivaldi|opera)
			browser=$2
			eval deinstall_${browser}
			exit 0
			;;
		*)
			usage
			;;
		esac
		shift
		;;
	clean)
		cleanup
		exit 0
		;;
	chroot|jail)
		case $2 in
		create)
			build_scripts
			install_chroot_base
			exit 0
			;;
		delete)
			deinstall_chroot_base
			exit 0
			;;
		upgrade)
			upgrade_chroot
			exit 0
			;;
		*)
			usage
			;;
		esac
		shift
		;;
	symlink)
		case $2 in
		icons|themes)
			eval symlink_$2
			exit 0
			;;
		*)
			usage
			;;
		esac
		shift
		;;
	*)
		usage
		;;
	esac
	shift
done

